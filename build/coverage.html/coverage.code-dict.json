{"/home/travis/build/npmtest/node-npmtest-react-native-elements/test.js":"/* istanbul instrument in package npmtest_react_native_elements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/lib.npmtest_react_native_elements.js":"/* istanbul instrument in package npmtest_react_native_elements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_native_elements = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_native_elements = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-native-elements && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_native_elements */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_native_elements\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_native_elements.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_native_elements.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_native_elements.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_native_elements.__dirname + '/lib.npmtest_react_native_elements.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/index.js":"import Button from './buttons/Button';\nimport ButtonGroup from './buttons/ButtonGroup';\nimport Card from './containers/Card';\nimport FormInput from './form/FormInput';\nimport FormLabel from './form/FormLabel';\nimport FormValidationMessage from './form/FormValidationMessage';\nimport List from './list/List';\nimport ListItem from './list/ListItem';\nimport PricingCard from './pricing/PricingCard';\nimport SocialIcon from './social/SocialIcon';\nimport Text from './text/Text';\nimport Divider from './divider/Divider';\nimport SideMenu from './sidemenu/SideMenu';\nimport CheckBox from './checkbox/CheckBox';\nimport SearchBar from './input/Search';\nimport Icon from './icons/Icon';\nimport Tabs from './tabs/Tabs';\nimport Tab from './tabs/Tab';\nimport colors from './config/colors';\nimport getIconType from './helpers/getIconType';\nimport normalize from './helpers/normalizeText';\nimport Grid from './grid/Grid';\nimport Row from './grid/Row';\nimport Col from './grid/Col';\nimport Tile from './tile/Tile';\nimport Slider from './slider/Slider';\nimport Avatar from './avatar/Avatar';\n\nconst Elements = {\n  Button,\n  ButtonGroup,\n  Card,\n  FormInput,\n  FormLabel,\n  FormValidationMessage,\n  List,\n  ListItem,\n  PricingCard,\n  SocialIcon,\n  Text,\n  Divider,\n  SideMenu,\n  CheckBox,\n  SearchBar,\n  Icon,\n  Tabs,\n  Tab,\n  colors,\n  getIconType,\n  normalize,\n  Grid,\n  Row,\n  Col,\n  Tile,\n  Slider,\n  Avatar\n};\n\nmodule.exports = Elements; // eslint-disable-line no-undef\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/webpack.config.js":"const path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: './src/index',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'build')\n  },\n  module: {\n    rules: [{\n      test: /\\.js$/,\n      use: ['babel-loader'],\n      exclude: /node_modules/\n    }]\n  },\n  externals: {\n    \"react\":\"react\",\n    \"react-native\":\"react-native\",\n    \"react-native-vector-icons/MaterialIcons\":\"react-native-vector-icons/MaterialIcons\",\n    \"react-native-vector-icons/FontAwesome\":\"react-native-vector-icons/FontAwesome\",\n    \"react-native-vector-icons/Zocial\":\"react-native-vector-icons/Zocial\",\n    \"react-native-vector-icons/Octicons\":\"react-native-vector-icons/Octicons\",\n    \"react-native-vector-icons/MaterialCommunityIcons\":\"react-native-vector-icons/MaterialCommunityIcons\",\n    \"react-native-vector-icons/Foundation\":\"react-native-vector-icons/Foundation\",\n    \"react-native-vector-icons/SimpleLineIcons\":\"react-native-vector-icons/SimpleLineIcons\",\n    \"react-native-vector-icons/EvilIcons\":\"react-native-vector-icons/EvilIcons\",\n    \"react-native-vector-icons/Entypo\":\"react-native-vector-icons/Entypo\",\n    \"react-native-vector-icons/Ionicons\":\"react-native-vector-icons/Ionicons\",\n    \"react-native-side-menu\":\"react-native-side-menu\",\n    \"react-native-tab-navigator\":\"react-native-tab-navigator\",\n  },\n  plugins: [\n    new webpack.optimize.UglifyJsPlugin()\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/avatar/Avatar.js":"import React, { PropTypes } from 'react';\nimport {\n  View,\n  Image,\n  StyleSheet,\n  TouchableOpacity,\n} from 'react-native';\n\nimport Icon from '../icons/Icon';\nimport Text from '../text/Text';\n\nconst Avatar = (props) => {\n  const {\n    component,\n    onPress,\n    onLongPress,\n    containerStyle,\n    icon,\n    iconStyle,\n    source,\n    small,\n    medium,\n    large,\n    xlarge,\n    avatarStyle,\n    rounded,\n    title,\n    titleStyle,\n    overlayContainerStyle,\n    activeOpacity,\n    ...attributes,\n  } = props;\n\n  let {\n    width,\n    height,\n  } = props;\n\n  if(small) {\n    width = 34;\n    height = 34;\n  } else if (medium) {\n    width = 50;\n    height = 50;\n  } else if (large) {\n    width = 75;\n    height = 75;\n  } else if (xlarge) {\n    width = 150;\n    height = 150;\n  } else if(!width && !height) {\n    width = 34;\n    height = 34;\n  } else if (!width) {\n    width = height;\n  } else if (!height) {\n    height = width;\n  }\n\n  let titleSize = width/2;\n  let iconSize = width/2;\n\n  let Component = onPress || onLongPress ? TouchableOpacity : View;\n  if (component) {\n    Component = component;\n  }\n\n  const renderContent = () => {\n    if (source) {\n      return (\n        <Image\n          style={[ styles.avatar, rounded && { borderRadius: width/2 }, avatarStyle && avatarStyle]}\n          source={source}\n        />\n      );\n    } else if (title) {\n      return (\n        <Text\n          style={[ styles.title, titleStyle && titleStyle ]}>\n          {title}\n        </Text>\n      );\n    } else if (icon) {\n      return (\n        <Icon\n          style={iconStyle && iconStyle}\n          color={icon.color || 'white'}\n          name={icon.name || 'user'}\n          size={icon.size || iconSize}\n          type={icon.type || 'font-awesome'}\n        />\n      );\n    }\n  };\n\n  const styles = StyleSheet.create({\n    container: {\n      paddingTop: 10,\n      paddingRight: 10,\n      paddingBottom: 10,\n      backgroundColor: 'transparent'\n    },\n    avatar: {\n      width: width,\n      height: height\n    },\n    overlayContainer: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: 'rgba(0,0,0,0.2)',\n      alignSelf: 'stretch',\n      justifyContent: 'center',\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      width: width,\n      height: height\n    },\n    title: {\n      color: '#ffffff',\n      fontSize: titleSize,\n      backgroundColor: 'rgba(0,0,0,0)',\n      textAlign: 'center',\n    },\n  });\n\n  return (\n    <Component\n      onPress={onPress}\n      onLongPress={onLongPress}\n      activeOpacity={activeOpacity}\n      style={[styles.container, containerStyle && containerStyle]}\n      {...attributes}\n    >\n      <View\n        style={[\n          styles.overlayContainer, rounded && { borderRadius: width/2 },\n          overlayContainerStyle && overlayContainerStyle,\n        ]}\n      >\n      {renderContent()}\n      </View>\n    </Component>\n  );\n};\n\nAvatar.propTypes = {\n  component: PropTypes.func,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  containerStyle: PropTypes.any,\n  source: Image.propTypes.source,\n  avatarStyle: PropTypes.any,\n  rounded: PropTypes.bool,\n  title: PropTypes.string,\n  titleStyle: PropTypes.any,\n  overlayContainerStyle: PropTypes.any,\n  activeOpacity: PropTypes.number,\n  icon: PropTypes.object,\n  iconStyle: PropTypes.any,\n  small: PropTypes.bool,\n  medium: PropTypes.bool,\n  large: PropTypes.bool,\n  xlarge: PropTypes.bool,\n};\n\nexport default Avatar;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/badge/badge.js":"import React from 'react';\nimport { Text, View, StyleSheet } from 'react-native';\n\nlet styles = {};\n\nconst Badge = props => {\n  const { badge } = props;\n\n  if (!badge) throw Error('badge prop is required');\n\n  if (badge.element) return badge.element;\n\n  return (\n    <View style={[ styles.badge, badge.badgeContainerStyle ]}>\n      <Text style={[ styles.text, badge.badgeTextStyle ]}>{badge.value}</Text>\n    </View>\n  );\n};\n\nBadge.propTypes = {\n  badge: React.PropTypes.any,\n};\n\nstyles = StyleSheet.create({\n  badge: {\n    top: 2,\n    padding: 12,\n    paddingTop: 3,\n    paddingBottom: 3,\n    backgroundColor: '#444',\n    borderRadius: 20,\n    position: 'absolute',\n    right: 30\n  },\n  text: {\n    fontSize: 14,\n    color: 'white'\n  }\n});\n\nexport default Badge;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/buttons/ButtonGroup.js":"import React, { PropTypes } from 'react';\nimport { View, Text as NativeText, StyleSheet, TouchableHighlight, Platform } from 'react-native';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport normalize from '../helpers/normalizeText';\n\nconst ButtonGroup = props => {\n  const {\n    component,\n    buttons,\n    onPress,\n    selectedIndex,\n    containerStyle,\n    innerBorderStyle,\n    lastBorderStyle,\n    buttonStyle,\n    textStyle,\n    selectedTextStyle,\n    selectedBackgroundColor,\n    underlayColor,\n    activeOpacity,\n    onHideUnderlay,\n    onShowUnderlay,\n    setOpacityTo,\n    ...attributes,\n  } = props;\n\n  const Component = component || TouchableHighlight;\n  return (\n    <View style={[styles.container, containerStyle && containerStyle]} {...attributes}>\n      {\n        buttons.map((button, i) => {\n          return (\n            <Component\n              activeOpacity={activeOpacity}\n              setOpacityTo={setOpacityTo}\n              onHideUnderlay={onHideUnderlay}\n              onShowUnderlay={onShowUnderlay}\n              underlayColor={underlayColor || '#ffffff'}\n              onPress={onPress? () => onPress(i) : () => {}}\n              key={i}\n              style={[\n                styles.button,\n                i < buttons.length - 1 && {\n                  borderRightWidth: innerBorderStyle && innerBorderStyle.width || 1,\n                  borderRightColor: innerBorderStyle && innerBorderStyle.color || colors.grey4\n                },\n                i === buttons.length - 1 && lastBorderStyle,\n                selectedIndex === i && {backgroundColor: selectedBackgroundColor || 'white'}\n              ]}>\n              <View style={[styles.textContainer, buttonStyle && buttonStyle]}>\n              {\n                button.element ? <button.element /> : (\n                  <Text\n                  style={[\n                    styles.buttonText,\n                    textStyle && textStyle,\n                    selectedIndex === i && {color: colors.grey1},\n                    selectedIndex === i && selectedTextStyle\n                  ]}>{button}</Text>\n                )\n              }\n              </View>\n            </Component>\n          );\n        })\n      }\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    flex: 1\n  },\n  textContainer: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  container: {\n    marginLeft: 10,\n    marginRight: 10,\n    marginBottom: 5,\n    marginTop: 5,\n    borderColor: '#e3e3e3',\n    borderWidth: 1,\n    flexDirection: 'row',\n    borderRadius: 3,\n    overflow: 'hidden',\n    backgroundColor: '#f5f5f5',\n    height: 40\n  },\n  buttonText: {\n    fontSize: normalize(13),\n    color: colors.grey2,\n    ...Platform.select({\n      ios: {\n        fontWeight: '500'\n      }\n    })\n  }\n});\n\nButtonGroup.propTypes = {\n  button: PropTypes.object,\n  component: PropTypes.any,\n  onPress: PropTypes.func,\n  buttons: PropTypes.array,\n  containerStyle: View.propTypes.style,\n  textStyle: NativeText.propTypes.style,\n  selectedTextStyle: NativeText.propTypes.style,\n  underlayColor: PropTypes.string,\n  selectedIndex: PropTypes.number,\n  activeOpacity: PropTypes.number,\n  onHideUnderlay: PropTypes.func,\n  onShowUnderlay: PropTypes.func,\n  setOpacityTo: PropTypes.any,\n  innerBorderStyle: PropTypes.oneOf(View.propTypes.style, NativeText.propTypes.style),\n  lastBorderStyle: PropTypes.oneOf(View.propTypes.style, NativeText.propTypes.style),\n  buttonStyle: View.propTypes.style,\n  selectedBackgroundColor: PropTypes.string,\n};\n\nexport default ButtonGroup;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/buttons/Button.js":"import React, { PropTypes } from 'react';\nimport {\n  TouchableNativeFeedback,\n  TouchableHighlight,\n  StyleSheet,\n  View,\n  Platform,\n  ActivityIndicator\n} from 'react-native';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport MaterialIcon from 'react-native-vector-icons/MaterialIcons';\nimport getIconType from '../helpers/getIconType';\nimport normalize from '../helpers/normalizeText';\n\nconst log = () => {\n  console.log('please attach method to this component'); //eslint-disable-line no-console\n};\n\nconst Button = props => {\n  const {\n    disabled,\n    loading,\n    loadingRight,\n    activityIndicatorStyle,\n    buttonStyle,\n    borderRadius,\n    title,\n    onPress,\n    icon,\n    secondary,\n    secondary2,\n    secondary3,\n    primary1,\n    primary2,\n    backgroundColor,\n    color,\n    fontSize,\n    underlayColor,\n    raised,\n    textStyle,\n    large,\n    iconRight,\n    fontWeight,\n    disabledStyle,\n    fontFamily,\n    ...attributes,\n  } = props;\n  let { Component } = props;\n\n  let iconElement;\n  if (icon) {\n    let Icon;\n    if (!icon.type) {\n      Icon = MaterialIcon;\n    } else {\n      Icon = getIconType(icon.type);\n    }\n    iconElement = (\n      <Icon\n        color={icon.color || 'white'}\n        size={icon.size || (large ? 26 : 18)}\n        style={[\n          iconRight ? styles.iconRight : styles.icon,\n          icon.style && icon.style\n        ]}\n        name={icon.name} />\n    );\n  }\n  let loadingElement;\n  if(loading){\n    loadingElement = (\n      <ActivityIndicator\n        animating={true}\n        style={[styles.activityIndicatorStyle, activityIndicatorStyle]}\n        color={color || 'white'}\n        size={large && 'large' || 'small'}\n      />\n    );\n  }\n  if (!Component && Platform.OS === 'ios') {\n    Component = TouchableHighlight;\n  }\n  if (!Component && Platform.OS === 'android') {\n    Component = TouchableNativeFeedback;\n  }\n  if (!Component) {\n    Component = TouchableHighlight;\n  }\n  return (\n    <Component\n      underlayColor={underlayColor || 'transparent'}\n      onPress={onPress || log}\n      disabled={disabled || false}\n      {...attributes}\n    >\n      <View\n        style={[\n          styles.button,\n          secondary && {backgroundColor: colors.secondary},\n          secondary2 && {backgroundColor: colors.secondary2},\n          secondary3 && {backgroundColor: colors.secondary3},\n          primary1 && {backgroundColor: colors.primary1},\n          primary2 && {backgroundColor: colors.primary2},\n          backgroundColor && {backgroundColor: backgroundColor},\n          borderRadius && {borderRadius},\n          raised && styles.raised,\n          !large && styles.small,\n          buttonStyle && buttonStyle,\n          disabled && {backgroundColor: colors.disabled},\n          disabled && disabledStyle && disabledStyle\n        ]}\n        >\n        {\n          icon && !iconRight && iconElement\n        }\n        {\n          loading && !loadingRight && loadingElement\n        }\n        <Text\n          style={[\n            styles.text,\n            color && {color},\n            !large && styles.smallFont,\n            fontSize && {fontSize},\n            textStyle && textStyle,\n            fontWeight && {fontWeight},\n            fontFamily && {fontFamily}\n          ]}>\n          {title}\n        </Text>\n        {\n          loading && loadingRight && loadingElement\n        }\n        {\n          icon && iconRight && iconElement\n        }\n      </View>\n    </Component>\n  );\n};\n\nButton.propTypes = {\n  buttonStyle: View.propTypes.style,\n  title: PropTypes.string,\n  onPress: PropTypes.any,\n  icon: PropTypes.object,\n  secondary: PropTypes.bool,\n  secondary2: PropTypes.bool,\n  secondary3: PropTypes.bool,\n  primary1: PropTypes.bool,\n  primary2: PropTypes.bool,\n  backgroundColor: PropTypes.string,\n  color: PropTypes.string,\n  fontSize: PropTypes.any,\n  underlayColor: PropTypes.string,\n  raised: PropTypes.bool,\n  textStyle: PropTypes.any,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  activityIndicatorStyle: View.propTypes.style,\n  loadingRight: PropTypes.bool,\n  Component: PropTypes.any,\n  borderRadius: PropTypes.number,\n  large: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  fontWeight: PropTypes.string,\n  disabledStyle: View.propTypes.style,\n  fontFamily: PropTypes.string\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    padding: 19,\n    marginLeft: 15,\n    marginRight: 15,\n    backgroundColor: colors.primary,\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'row'\n  },\n  text: {\n    color: 'white',\n    fontSize: normalize(16)\n  },\n  icon: {\n    marginRight: 10\n  },\n  iconRight: {\n    marginLeft: 10\n  },\n  small: {\n    padding: 12\n  },\n  smallFont: {\n    fontSize: normalize(14)\n  },\n  activityIndicatorStyle: {\n    marginHorizontal: 10,\n    height: 0\n  },\n  raised: {\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: {height: 1, width: 1},\n        shadowOpacity: 1,\n        shadowRadius: 1\n      },\n      android: {\n        elevation: 2\n      }\n    })\n  }\n});\n\nexport default Button;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/checkbox/CheckBox.js":"import React, { PropTypes } from 'react';\nimport { StyleSheet, TouchableOpacity, View, Platform } from 'react-native';\nimport Text from '../text/Text';\nimport fonts from '../config/fonts';\nimport colors from '../config/colors';\nimport FAIcon from 'react-native-vector-icons/FontAwesome';\nimport getIconType from '../helpers/getIconType';\n\nconst CheckBox = props => {\n  const {\n    component, \n    checked, \n    iconRight, \n    title, \n    center, \n    right, \n    containerStyle, \n    textStyle, \n    onIconPress, \n    onLongIconPress, \n    checkedIcon, \n    uncheckedIcon, \n    iconType, \n    checkedColor, \n    uncheckedColor, \n    checkedTitle, \n    fontFamily,\n    ...attributes,\n  } = props;\n  \n\n  let Icon = FAIcon;\n  if (iconType) {\n    Icon = getIconType(iconType);\n  }\n  const Component = component || TouchableOpacity;\n  let iconName = uncheckedIcon;\n  if (checked) {\n    iconName = checkedIcon;\n  }\n  return (\n    <Component\n      style={[\n        styles.container,\n        containerStyle && containerStyle\n      ]}\n      {...attributes}\n    >\n      <View style={[\n        styles.wrapper,\n        right && {justifyContent: 'flex-end'},\n        center && {justifyContent: 'center'}\n      ]}>\n        {\n          !iconRight && (\n            <Icon\n              color={checked ? checkedColor : uncheckedColor}\n              name={iconName}\n              size={24}\n              onLongPress={onLongIconPress}\n              onPress={onIconPress} />\n          )\n        }\n        <Text style={[\n          styles.text,\n          textStyle && textStyle,\n          fontFamily && {fontFamily}\n        ]}>\n          {checked ? checkedTitle || title : title}\n        </Text>\n        {\n          iconRight && (\n            <Icon\n              color={checked ? checkedColor : uncheckedColor}\n              name={iconName}\n              size={24} />\n          )\n        }\n      </View>\n    </Component>\n  );\n};\n\nCheckBox.defaultProps = {\n  checked: false,\n  iconRight: false,\n  right: false,\n  center: false,\n  checkedColor: 'green',\n  uncheckedColor: '#bfbfbf',\n  checkedIcon: 'check-square-o',\n  uncheckedIcon: 'square-o'\n};\n\nCheckBox.propTypes = {\n  component: PropTypes.any,\n  checked: PropTypes.bool,\n  iconRight: PropTypes.bool,\n  title: PropTypes.string,\n  center: PropTypes.bool,\n  right: PropTypes.bool,\n  containerStyle: View.propTypes.style,\n  textStyle: View.propTypes.style,\n  checkedIcon: PropTypes.string,\n  uncheckedIcon: PropTypes.string,\n  iconType: PropTypes.string,\n  checkedColor: PropTypes.string,\n  uncheckedColor: PropTypes.string,\n  checkedTitle: PropTypes.string,\n  onIconPress: PropTypes.func,\n  onLongIconPress: PropTypes.func,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  container: {\n    margin: 5,\n    marginLeft: 10,\n    marginRight: 10,\n    backgroundColor: '#fafafa',\n    borderColor: '#ededed',\n    borderWidth: 1,\n    padding: 10,\n    borderRadius: 3\n  },\n  text: {\n    marginLeft: 10,\n    marginRight: 10,\n    color: colors.grey1,\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold'\n      },\n      android: {\n        ...fonts.android.bold,\n      }\n    })\n  }\n});\n\nexport default CheckBox;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/config/colors.js":"export default {\n  primary: '#9E9E9E',\n  primary1: '#4d86f7',\n  primary2: '#6296f9',\n  secondary: '#8F0CE8',\n  secondary2: '#00B233',\n  secondary3: '#00FF48',\n  grey0: '#393e42',\n  grey1: '#43484d',\n  grey2: '#5e6977',\n  grey3: '#86939e',\n  grey4: '#bdc6cf',\n  grey5: '#e1e8ee',\n  dkGreyBg: '#232323',\n  greyOutline: '#cbd2d9',\n  searchBg: '#303337',\n  disabled: '#dadee0',\n  white: '#ffffff',\n  error: '#ff190c'\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/config/fonts.js":"export default {\n  ios: {},\n  android: {\n    regular: {\n      fontFamily: 'sans-serif',\n    },\n    light: {\n      fontFamily: 'sans-serif-light',\n    },\n    condensed: {\n      fontFamily: 'sans-serif-condensed',\n    },\n    condensed_light: {\n      fontFamily: 'sans-serif-condensed',\n      fontWeight: 'light',\n    },\n    black: {\n      // note(brentvatne): sans-serif-black is only supported on Android 5+,\n      // we can detect that here and use it in that case at some point.\n      fontFamily: 'sans-serif',\n      fontWeight: 'bold',\n    },\n    thin: {\n      fontFamily: 'sans-serif-thin',\n    },\n    medium: {\n      fontFamily: 'sans-serif-medium',\n    },\n    bold: {\n      fontFamily: 'sans-serif',\n      fontWeight: 'bold',\n    },\n  },\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/containers/Card.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, Platform, Image } from 'react-native';\nimport fonts from '../config/fonts';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport Divider from '../divider/Divider';\nimport normalize from '../helpers/normalizeText';\n\nconst Card = props => {\n  const {\n    children,\n    flexDirection,\n    containerStyle,\n    wrapperStyle,\n    imageWrapperStyle,\n    title,\n    titleStyle,\n    featuredTitle,\n    featuredTitleStyle,\n    featuredSubtitle,\n    featuredSubtitleStyle,\n    dividerStyle,\n    image,\n    imageStyle,\n    fontFamily,\n    ...attributes,\n  } = props;\n\n  return (\n    <View style={[\n      styles.container,\n      image && {padding: 0},\n      containerStyle && containerStyle]}\n      {...attributes}\n    >\n      <View style={[styles.wrapper, wrapperStyle && wrapperStyle, flexDirection && {flexDirection}]}>\n        {\n          title && (\n            <View>\n              <Text style={[\n                styles.cardTitle,\n                image && styles.imageCardTitle,\n                titleStyle && titleStyle,\n                fontFamily && {fontFamily}\n              ]}>{title}</Text>\n              { !image && <Divider style={[styles.divider, dividerStyle && dividerStyle]} />}\n            </View>\n          )\n        }\n        {\n          image && (\n            <View style={imageWrapperStyle && imageWrapperStyle}>\n              <Image\n                resizeMode='cover'\n                style={[{width: null, height: 150}, imageStyle && imageStyle]}\n                source={image}>\n                <View style={styles.overlayContainer}>\n                  {featuredTitle && <Text style={[styles.featuredTitle, featuredTitleStyle && featuredTitleStyle]}>{featuredTitle}</Text>}\n                  {featuredSubtitle && <Text style={[styles.featuredSubtitle, featuredSubtitleStyle && featuredSubtitleStyle]}>{featuredSubtitle}</Text>}\n                </View>\n              </Image>\n              <View\n                style={[{padding: 10}, wrapperStyle && wrapperStyle]}>\n                {children}\n              </View>\n            </View>\n          )\n        }\n        { !image && children}\n      </View>\n    </View>\n  );\n};\n\nCard.propTypes = {\n  children: PropTypes.any,\n  flexDirection: PropTypes.string,\n  containerStyle: View.propTypes.style,\n  wrapperStyle: View.propTypes.style,\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  featuredTitle: PropTypes.string,\n  featuredTitleStyle: Text.propTypes.style,\n  featuredSubtitle: PropTypes.string,\n  featuredSubtitleStyle: Text.propTypes.style,\n  dividerStyle: View.propTypes.style,\n  image: Image.propTypes.source,\n  imageStyle: View.propTypes.style,\n  imageWrapperStyle: View.propTypes.style,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    borderColor: colors.grey5,\n    borderWidth: 1,\n    padding: 15,\n    margin: 15,\n    marginBottom: 0,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .2)',\n        shadowOffset: {height: 0, width: 0},\n        shadowOpacity: 1,\n        shadowRadius: 1\n      },\n      android: {\n        elevation: 1\n      }\n    })\n  },\n  featuredTitle: {\n    fontSize: normalize(18),\n    marginBottom: 8,\n    color: 'white',\n    ...Platform.select({\n      ios: {\n        fontWeight: '800'\n      },\n      android: {\n        ...fonts.android.black\n      }\n    })\n  },\n  featuredSubtitle: {\n    fontSize: normalize(13),\n    marginBottom: 8,\n    color: 'white',\n    ...Platform.select({\n      ios: {\n        fontWeight: '400'\n      },\n      android: {\n        ...fonts.android.black\n      }\n    })\n  },\n  wrapper: {\n    backgroundColor: 'transparent'\n  },\n  divider: {\n    marginBottom: 15\n  },\n  cardTitle: {\n    fontSize: normalize(14),\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold'\n      },\n      android: {\n        ...fonts.android.black\n      }\n    }),\n    textAlign: 'center',\n    marginBottom: 15,\n    color: colors.grey1\n  },\n  imageCardTitle: {\n    marginTop: 15,\n  },\n  overlayContainer: {\n    flex: 1,\n    alignItems: 'center',\n    backgroundColor: 'rgba(0, 0, 0, 0.2)',\n    alignSelf: 'stretch',\n    justifyContent: 'center',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n\nexport default Card;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/divider/Divider.js":"import React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport colors from '../config/colors';\n\nlet styles = {};\n\nconst Divider = ({style}) => (\n  <View style={[styles.container, style && style]} />\n);\n\nDivider.propTypes = {\n  style: View.propTypes.style,\n};\n\nstyles = StyleSheet.create({\n  container: {\n    height: 1,\n    backgroundColor: colors.grey5\n  }\n});\n\nexport default Divider;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/form/FormInput.js":"import React, { Component, PropTypes } from 'react';\nimport { TextInput, StyleSheet, View, Platform, Dimensions } from 'react-native';\nimport colors from '../config/colors';\nimport normalize from '../helpers/normalizeText';\n\nconst {width} = Dimensions.get('window');\n\nclass FormInput extends Component {\n  focus() {\n    const ref = this.props.textInputRef;\n    this.refs[ref].focus();\n  }\n  blur() {\n    const ref = this.props.textInputRef;\n    this.refs[ref].blur();\n  }\n  render () {\n    const {\n      containerStyle,\n      inputStyle,\n      textInputRef,\n      containerRef,\n      selectionColor,\n      ...attributes,\n    } = this.props;\n    return (\n      <View ref={containerRef} style={[styles.container, containerStyle && containerStyle]}>\n        <TextInput\n          ref={textInputRef}\n          selectionColor={selectionColor || colors.grey3}\n          style={[styles.input, inputStyle && inputStyle]}\n          {...attributes}\n        />\n      </View>\n    );\n  }\n}\n\nFormInput.propTypes = {\n  containerStyle: View.propTypes.style,\n  inputStyle: View.propTypes.style,\n  selectionColor: PropTypes.string,\n  textInputRef: PropTypes.string,\n  containerRef: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginLeft: 15,\n    marginRight: 15,\n    ...Platform.select({\n      ios: {\n        borderBottomColor: colors.grey4,\n        borderBottomWidth: 1,\n        marginLeft: 20,\n        marginRight: 20\n      }\n    })\n  },\n  input: {\n    ...Platform.select({\n      android: {\n        height: 46,\n      },\n      ios: {\n        height: 36,\n      }\n    }),\n    width: width,\n    color: colors.grey3,\n    fontSize: normalize(14)\n  }\n});\n\nexport default FormInput;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/form/FormLabel.js":"import React, { PropTypes } from 'react';\nimport { StyleSheet, View, Platform } from 'react-native';\nimport colors from '../config/colors';\nimport fonts from '../config/fonts';\nimport Text from '../text/Text';\nimport normalize from '../helpers/normalizeText';\n\nconst FormLabel = props => {\n  const {containerStyle, labelStyle, children, fontFamily, ...attributes} = props;\n  return (\n    <View style={[styles.container, containerStyle && containerStyle]} {...attributes}>\n      <Text style={[\n        styles.label,\n        labelStyle && labelStyle,\n        fontFamily && {fontFamily}\n      ]}>{children}</Text>\n    </View>\n  );\n};\n\nFormLabel.propTypes = {\n  containerStyle: View.propTypes.style,\n  labelStyle: View.propTypes.style,\n  children: PropTypes.any,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  container: {},\n  label: {\n    marginLeft: 20,\n    marginRight: 20,\n    marginTop: 15,\n    marginBottom: 1,\n    color: colors.grey3,\n    fontSize: normalize(12),\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold'\n      },\n      android: {\n        ...fonts.android.bold\n      }\n    })\n  }\n});\n\nexport default FormLabel;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/form/FormValidationMessage.js":"import React, { PropTypes } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport colors from '../config/colors';\nimport Text from '../text/Text';\nimport normalize from '../helpers/normalizeText';\n\nconst FormValidationMessage = props => {\n  const {containerStyle, labelStyle, children, fontFamily, ...attributes} = props;\n  return (\n    <View style={[styles.container, containerStyle && containerStyle]} {...attributes}>\n      <Text style={[\n        styles.label,\n        labelStyle && labelStyle,\n        fontFamily && {fontFamily}\n      ]}>{children}</Text>\n    </View>\n  );\n};\n\nFormValidationMessage.propTypes = {\n  containerStyle: View.propTypes.style,\n  labelStyle: View.propTypes.style,\n  children: PropTypes.any,\n  fontFamily: PropTypes.string,\n};\n\nconst styles = StyleSheet.create({\n  container: {},\n  label: {\n    marginLeft: 20,\n    marginRight: 20,\n    marginTop: 5,\n    marginBottom: 1,\n    color: colors.error,\n    fontSize: normalize(12),\n  }\n});\n\nexport default FormValidationMessage;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/grid/Col.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\n\nconst Col = (props) => {\n  const {containerStyle, size, onPress, activeOpacity} = props;\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: (size) ? size : (containerStyle && containerStyle.width) ? 0 : 1,\n      flexDirection: 'column',\n    },\n  });\n\n  if (onPress) {\n    return (\n      <TouchableOpacity\n        style={[\n          styles.container,\n          containerStyle && containerStyle,\n        ]}\n        activeOpacity={activeOpacity}\n        onPress={onPress}\n      >\n        <View\n          {...props}\n        >\n          {props.children}\n        </View>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View\n      style={[\n        styles.container,\n        containerStyle && containerStyle,\n      ]}\n      {...props}\n    >\n      {props.children}\n    </View>\n  );\n};\n\nCol.propTypes = {\n  size: PropTypes.number,\n  containerStyle: PropTypes.any,\n  onPress: PropTypes.func,\n  activeOpacity: PropTypes.number,\n  children: PropTypes.any,\n};\n\nCol.defaultProps = {\n  activeOpacity: 1,\n};\n\nexport default Col;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/grid/Grid.js":"import React, { Component, PropTypes } from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\nimport Row from './Row';\n\nclass Grid extends Component {\n  styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      flexDirection: this.isRow() ? 'column' : 'row',\n    },\n  })\n\n  isRow() {\n    let isRow = false;\n    React.Children.forEach(this.props.children, (child) => {\n      if (child && child.type === Row) {\n        isRow = true;\n      }\n    });\n\n    return isRow;\n  }\n\n  render() {\n    const {onPress, activeOpacity, containerStyle} = this.props;\n\n    if (onPress) {\n      return (\n        <TouchableOpacity activeOpacity={activeOpacity} onPress={onPress}>\n          <View\n            style={[\n              this.styles.container,\n              containerStyle && containerStyle,\n            ]}\n            {...this.props}\n          >\n            {this.props.children}\n          </View>\n        </TouchableOpacity>\n      );\n    }\n\n    return (\n      <View\n        style={[\n          this.styles.container,\n          containerStyle && containerStyle,\n        ]}\n        {...this.props}\n      >\n        {this.props.children}\n      </View>\n    );\n  }\n}\n\nGrid.propTypes = {\n  containerStyle: PropTypes.any,\n  onPress: PropTypes.func,\n  activeOpacity: PropTypes.number,\n  children: PropTypes.any,\n};\n\nGrid.defaultProps = {\n  activeOpacity: 1,\n};\n\nexport default Grid;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/grid/Row.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, TouchableOpacity } from 'react-native';\n\nconst Row = (props) => {\n  const {containerStyle, size, onPress, activeOpacity} = props;\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: (size) ? size : (containerStyle && containerStyle.height) ? 0 : 1,\n      flexDirection: 'row',\n    },\n  });\n\n  if (onPress) {\n    return (\n      <TouchableOpacity\n        style={[\n          styles.container,\n          containerStyle && containerStyle,\n        ]}\n        activeOpacity={activeOpacity}\n        onPress={onPress}\n      >\n        <View\n          {...props}\n        >\n          {props.children}\n        </View>\n      </TouchableOpacity>\n    );\n  }\n\n  return (\n    <View\n      style={[\n        styles.container,\n        containerStyle && containerStyle,\n      ]}\n      {...props}\n    >\n      {props.children}\n    </View>\n  );\n};\n\nRow.propTypes = {\n  size: PropTypes.number,\n  containerStyle: PropTypes.any,\n  onPress: PropTypes.func,\n  activeOpacity: PropTypes.number,\n  children: PropTypes.any,\n};\n\nRow.defaultProps = {\n  activeOpacity: 1,\n};\n\nexport default Row;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/helpers/getIconType.js":"import ZocialIcon from 'react-native-vector-icons/Zocial';\nimport OcticonIcon from 'react-native-vector-icons/Octicons';\nimport MaterialIcon from 'react-native-vector-icons/MaterialIcons';\nimport MaterialCommunityIcon from 'react-native-vector-icons/MaterialCommunityIcons';\nimport Ionicon from 'react-native-vector-icons/Ionicons';\nimport FoundationIcon from 'react-native-vector-icons/Foundation';\nimport EvilIcon from 'react-native-vector-icons/EvilIcons';\nimport EntypoIcon from 'react-native-vector-icons/Entypo';\nimport FAIcon from 'react-native-vector-icons/FontAwesome';\nimport SimpleLineIcon from 'react-native-vector-icons/SimpleLineIcons';\n\nexport default (type) => {\n  switch (type) {\n    case 'zocial':\n      return ZocialIcon;\n    case 'octicon':\n      return OcticonIcon;\n    case 'material':\n      return MaterialIcon;\n    case 'material-community':\n      return MaterialCommunityIcon;\n    case 'ionicon':\n      return Ionicon;\n    case 'foundation':\n      return FoundationIcon;\n    case 'evilicon':\n      return EvilIcon;\n    case 'entypo':\n      return EntypoIcon;\n    case 'font-awesome':\n      return FAIcon;\n    case 'simple-line-icon':\n      return SimpleLineIcon;\n    default:\n      return MaterialIcon;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/helpers/normalizeText.js":"// \n// Method to normalize size of fonts across devices\n//\n// Some code taken from https://jsfiddle.net/97ty7yjk/ &\n// https://stackoverflow.com/questions/34837342/font-size-on-iphone-6s-plus\n//\n// author: @xiaoneng\n// date: 14/10/2016\n// version: 03\n//\n\nconst React = require('react-native'); // eslint-disable-line no-undef\nconst {\n  PixelRatio,\n  Dimensions\n} = React;\n\nconst pixelRatio = PixelRatio.get();\nconst deviceHeight = Dimensions.get('window').height;\nconst deviceWidth = Dimensions.get('window').width;\n\n// -- Testing Only --\n// const fontScale = PixelRatio.getFontScale();\n// const layoutSize = PixelRatio.getPixelSizeForLayoutSize(14);\n// console.log('normalizeText getPR ->', pixelRatio);\n// console.log('normalizeText getFS ->', fontScale);\n// console.log('normalizeText getDH ->', deviceHeight);\n// console.log('normalizeText getDW ->', deviceWidth);\n// console.log('normalizeText getPSFLS ->', layoutSize);\n\nconst normalize = (size) => {\n  if (pixelRatio === 2) {\n    // iphone 5s and older Androids\n    if (deviceWidth < 360) {\n      return size * 0.95;\n    } \n    // iphone 5\n    if (deviceHeight < 667) {\n      return size;\n    // iphone 6-6s\n    } else if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.15;\n    }\n    // older phablets\n    return size * 1.25;\n  } \n  if (pixelRatio === 3) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    }    \n    // Catch other weird android width sizings\n    if (deviceHeight < 667) {\n      return size * 1.15;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if (deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.2;\n    }\n    // catch larger devices\n    // ie iphone 6s plus / 7 plus / mi note 等等\n    return size * 1.27;\n  }\n  if (pixelRatio === 3.5) {\n    // catch Android font scaling on small machines\n    // where pixel ratio / font scale ratio => 3:3\n    if (deviceWidth <= 360) {\n        return size;\n    // Catch other smaller android height sizings\n    }\n    if (deviceHeight < 667) {\n      return size * 1.20;\n    // catch in-between size Androids and scale font up\n    // a tad but not too much\n    }\n    if(deviceHeight >= 667 && deviceHeight <= 735) {\n      return size * 1.25;\n    }\n    // catch larger phablet devices\n    return size * 1.40;\n  }\n  // if older device ie pixelRatio !== 2 || 3 || 3.5\n  return size;\n};\n\nmodule.exports = normalize; // eslint-disable-line no-undef\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/icons/Icon.js":"import React, { PropTypes } from 'react';\nimport { Platform, TouchableHighlight, View, StyleSheet } from 'react-native';\nimport getIconType from '../helpers/getIconType';\n\nconst Icon = props => {\n  const {\n    type,\n    name,\n    size,\n    color,\n    iconStyle,\n    component,\n    underlayColor,\n    reverse,\n    raised,\n    containerStyle,\n    reverseColor,\n    onPress,\n    ...attributes,\n  } = props;\n\n  let Component = View;\n  if (onPress) {\n    Component = TouchableHighlight;\n  }\n  if (component) {\n    Component = component;\n  }\n  let Icon;\n  if (!type) {\n    Icon = getIconType('material');\n  } else {\n    Icon = getIconType(type);\n  }\n  return (\n    <Component\n      underlayColor={\n        reverse ? color : underlayColor || color\n      }\n      style={[\n        (reverse || raised) && styles.button,\n        (reverse || raised) && {\n          borderRadius: size + 4,\n          height: size * 2 + 4,\n          width: size * 2 + 4\n        },\n        raised && styles.raised,\n        {\n          backgroundColor: reverse ? color : raised ? 'white' : 'transparent',\n          alignItems: 'center',\n          justifyContent: 'center'},\n        containerStyle && containerStyle\n      ]}\n      onPress={onPress}\n      {...attributes}\n    >\n      <Icon\n        style={[\n          {backgroundColor: 'transparent'},\n          iconStyle && iconStyle\n        ]}\n        size={size}\n        name={name}\n        color={reverse ? reverseColor : color} />\n    </Component>\n  );\n};\n\nIcon.propTypes = {\n  type: PropTypes.string,\n  name: PropTypes.string,\n  size: PropTypes.number,\n  color: PropTypes.string,\n  component: PropTypes.element,\n  underlayColor: PropTypes.string,\n  reverse: PropTypes.bool,\n  raised: PropTypes.bool,\n  containerStyle: View.propTypes.style,\n  iconStyle: View.propTypes.style,\n  onPress: PropTypes.func,\n  reverseColor: PropTypes.string,\n};\n\nIcon.defaultProps = {\n  underlayColor: 'white',\n  reverse: false,\n  raised: false,\n  size: 24,\n  color: 'black',\n  reverseColor: 'white'\n};\n\nconst styles = StyleSheet.create({\n  button: {\n    margin: 7\n  },\n  raised: {\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: {height: 1, width: 1},\n        shadowOpacity: 1,\n        shadowRadius: 1\n      },\n      android: {\n        elevation: 2\n      }\n    })\n  }\n});\n\nexport default Icon;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/input/Search.js":"import React, { PropTypes, Component } from 'react';\nimport { ActivityIndicator, View, StyleSheet, TextInput, Platform } from 'react-native';\nimport Icon from 'react-native-vector-icons/MaterialIcons';\nimport colors from '../config/colors';\nimport normalize from '../helpers/normalizeText';\n\nclass Search extends Component {\n  focus() {\n    const ref = this.props.textInputRef;\n    this.refs[ref].focus();\n  }\n\n  clearText() {\n    const ref = this.props.textInputRef;\n    this.refs[ref].clear();\n  }\n\n  render () {\n    const {\n      containerStyle,\n      inputStyle,\n      icon,\n      noIcon,\n      lightTheme,\n      round,\n      showLoadingIcon,\n      loadingIcon,\n      clearIcon,\n      containerRef,\n      textInputRef,\n      selectionColor,\n      underlineColorAndroid,\n      ...attributes,\n    } = this.props;\n    return (\n      <View\n        ref={containerRef}\n        style={[\n          styles.container,\n          lightTheme && styles.containerLight,\n          containerStyle && containerStyle\n        ]}>\n        <TextInput\n          ref={textInputRef}\n          selectionColor={selectionColor || colors.grey3}\n          underlineColorAndroid={underlineColorAndroid ? underlineColorAndroid : 'transparent'}\n          style={[\n            styles.input,\n            lightTheme && styles.inputLight,\n            noIcon && {paddingLeft: 9},\n            round && {borderRadius: Platform.OS === 'ios' ? 15 : 20},\n            inputStyle && inputStyle\n          ]}\n          {...attributes}\n        />\n        {\n          !noIcon && (\n            <Icon\n              size={16}\n              style={[\n                styles.icon,\n                icon.style && icon.style\n              ]}\n              name={icon.name || 'search'}\n              color={icon.color || colors.grey3}\n            />\n          )\n        }\n        {\n          clearIcon && (\n            <Icon\n              size={16}\n              style={[\n                styles.clearIcon,\n                clearIcon.style && clearIcon.style\n              ]}\n              name={clearIcon.name || 'close'}\n              onPress={this.clearText.bind(this)}\n              color={clearIcon.color || colors.grey3}\n            />\n          )\n        }\n        {\n          showLoadingIcon && (\n            <ActivityIndicator\n              style={[\n                styles.loadingIcon,\n                loadingIcon.style && loadingIcon.style\n              ]}\n              color={icon.color || colors.grey3}\n            />\n          )\n        }\n      </View>\n    );\n  }\n}\n\nSearch.propTypes = {\n  icon: PropTypes.object,\n  noIcon: PropTypes.bool,\n  lightTheme: PropTypes.bool,\n  containerStyle: View.propTypes.style,\n  inputStyle: View.propTypes.style,\n  round: PropTypes.bool,\n  showLoadingIcon: PropTypes.bool,\n  loadingIcon: PropTypes.object,\n  clearIcon: PropTypes.oneOf(PropTypes.object, PropTypes.bool),\n  textInputRef: PropTypes.string,\n  containerRef: PropTypes.string,\n  selectionColor: PropTypes.string,\n  underlineColorAndroid: PropTypes.string,\n};\n\nSearch.defaultProps = {\n  placeholderTextColor: colors.grey3,\n  lightTheme: false,\n  noIcon: false,\n  round: false,\n  icon: {},\n  showLoadingIcon: false,\n  loadingIcon: {}\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderBottomColor: '#000',\n    borderTopColor: '#000',\n    backgroundColor: colors.grey0\n  },\n  containerLight: {\n    backgroundColor: colors.grey5,\n    borderTopColor: '#e1e1e1',\n    borderBottomColor: '#e1e1e1'\n  },\n  icon: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    left: 16,\n    top: 15.5,\n    ...Platform.select({\n      android: {\n        top: 20\n      }\n    })\n  },\n  loadingIcon: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    right: 16,\n    top: 13,\n    ...Platform.select({\n      android: {\n        top: 17\n      }\n    })\n  },  \n  input: {\n    paddingLeft: 26,\n    paddingRight: 19,\n    margin: 8,\n    borderRadius: 3,\n    overflow: 'hidden',\n    backgroundColor: colors.searchBg,\n    fontSize: normalize(14),\n    color: colors.grey3,\n    height: 40,\n    ...Platform.select({\n      ios: {\n        height: 30\n      },\n      android: {\n        borderWidth: 0\n      }\n    })\n  },\n  inputLight: {\n    backgroundColor: colors.grey4\n  },\n  clearIcon: {\n    backgroundColor: 'transparent',\n    position: 'absolute',\n    right: 16,\n    top: 15.5,\n    ...Platform.select({\n      android: {\n        top: 17\n      }\n    })\n  }\n});\n\nexport default Search;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/list/ListItem.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, TouchableHighlight, Image, Platform, Switch, TextInput } from 'react-native';\nimport Badge from '../badge/badge';\nimport Icon from '../icons/Icon';\nimport Text from '../text/Text';\nimport colors from '../config/colors';\nimport fonts from '../config/fonts';\nimport normalize from '../helpers/normalizeText';\n\nconst ListItem = props => {\n  const {\n    onPress,\n    title,\n    leftIcon,\n    rightIcon,\n    leftIconContainerStyle,\n    avatarStyle,\n    underlayColor,\n    subtitle,\n    subtitleStyle,\n    containerStyle,\n    wrapperStyle,\n    titleStyle,\n    titleContainerStyle,\n    hideChevron,\n    chevronColor,\n    roundAvatar,\n    component,\n    fontFamily,\n    rightTitle,\n    rightTitleContainerStyle,\n    rightTitleStyle,\n    subtitleContainerStyle,\n    badge,\n    label,\n    onLongPress,\n    switchButton,\n    onSwitch,\n    switchDisabled,\n    switchOnTintColor,\n    switchThumbTintColor,\n    switchTintColor,\n    switched,\n    textInput,\n    textInputAutoCapitalize,\n    textInputAutoCorrect,\n    textInputAutoFocus,\n    textInputEditable,\n    textInputKeyboardType,\n    textInputMaxLength,\n    textInputMultiline,\n    textInputOnChangeText,\n    textInputOnFocus,\n    textInputOnBlur,\n    textInputSelectTextOnFocus,\n    textInputReturnKeyType,\n    textInputValue,\n    textInputStyle,\n    textInputContainerStyle,\n    ...attributes,\n  } = props;\n\n  let {avatar} = props;\n\n  let Component = onPress || onLongPress ? TouchableHighlight : View;\n  if (component) {\n    Component = component;\n  }\n  if (typeof avatar === 'string') {\n    avatar = {uri: avatar};\n  }\n  return (\n    <Component\n      onLongPress={onLongPress}\n      onPress={onPress}\n      underlayColor={underlayColor}\n      style={[styles.container, containerStyle && containerStyle]}\n      {...attributes}\n    >\n      <View style={[styles.wrapper, wrapperStyle && wrapperStyle]}>\n        {\n          leftIcon && leftIcon.name && (\n            <View style={[styles.iconStyle, leftIconContainerStyle && leftIconContainerStyle]}>\n              <Icon\n                type={leftIcon.type}\n                iconStyle={[styles.icon, leftIcon.style && leftIcon.style]}\n                name={leftIcon.name}\n                color={leftIcon.color || colors.grey4}\n                size={leftIcon.size || 24}\n              />\n            </View>\n          )\n        }\n        {\n          avatar && (\n            <Image\n              style={[\n                styles.avatar,\n                roundAvatar && {borderRadius: 17},\n                avatarStyle && avatarStyle]}\n              source={avatar}\n              />\n          )\n        }\n        <View style={styles.titleSubtitleContainer}>\n          <View style={titleContainerStyle}>\n            {(title && (typeof title === 'string' || typeof title === 'number')) ? (\n              <Text\n                style={[\n                  styles.title,\n                  !leftIcon && {marginLeft: 10},\n                  titleStyle && titleStyle,\n                  fontFamily && {fontFamily}\n                ]}>{title}</Text>\n            ) : (\n              <View>\n                {title}\n              </View>\n            )}\n          </View>\n          <View style={subtitleContainerStyle}>\n            {(subtitle && (typeof subtitle === 'string' || typeof subtitle === 'number')) ? (\n              <Text\n                style={[\n                  styles.subtitle,\n                  !leftIcon && {marginLeft: 10},\n                  subtitleStyle && subtitleStyle,\n                  fontFamily && {fontFamily}\n                ]}>{subtitle}</Text>\n            ) : (\n              <View>\n                {subtitle}\n              </View>\n            )}\n          </View>\n        </View>\n        {\n          rightTitle && (rightTitle !== '') && !textInput && (\n            <View style={[styles.rightTitleContainer, rightTitleContainerStyle]}>\n              <Text style={[styles.rightTitleStyle, rightTitleStyle]}>{rightTitle}</Text>\n            </View>\n          )\n        }\n        {\n          textInput && (\n            <View style={[styles.rightTitleContainer, textInputContainerStyle]}>\n              <TextInput\n                style={[styles.textInputStyle, textInputStyle]}\n                defaultValue={rightTitle}\n                value={textInputValue}\n                autoCapitalize={textInputAutoCapitalize}\n                autoCorrect={textInputAutoCorrect}\n                autoFocus={textInputAutoFocus}\n                editable={textInputEditable}\n                keyboardType={textInputKeyboardType}\n                maxLength={textInputMaxLength}\n                multiline={textInputMultiline}\n                onChangeText={textInputOnChangeText}\n                onFocus={textInputOnFocus}\n                onBlur={textInputOnBlur}\n                selectTextOnFocus={textInputSelectTextOnFocus}\n                returnKeyType={textInputReturnKeyType}/>\n            </View>\n          )\n        }\n        {\n          !hideChevron && (\n            <View style={styles.chevronContainer}>\n              <Icon\n                type={rightIcon.type}\n                iconStyle={rightIcon.style}\n                size={28}\n                name={rightIcon.name || 'chevron-right'}\n                color={rightIcon.color || chevronColor}\n              />\n            </View>\n          )\n        }\n        {\n          switchButton && hideChevron && (\n            <View style={styles.switchContainer}>\n              <Switch\n                onValueChange={onSwitch}\n                disabled={switchDisabled}\n                onTintColor={switchOnTintColor}\n                thumbTintColor={switchThumbTintColor}\n                tintColor={switchTintColor}\n                value={switched}/>\n            </View>\n          )\n        }\n        {\n          badge && !rightTitle && (\n            <Badge\n              badge={badge}\n            />)\n        }\n        {\n          label && label\n        }\n      </View>\n    </Component>\n  );\n};\n\nListItem.defaultProps = {\n  underlayColor: 'white',\n  chevronColor: colors.grey4,\n  rightIcon: {name: 'chevron-right'},\n  hideChevron: false,\n  roundAvatar: false,\n  switchButton: false,\n  textInputEditable: true\n};\n\nListItem.propTypes = {\n  title: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  avatar: PropTypes.any,\n  icon: PropTypes.any,\n  onPress: PropTypes.func,\n  rightIcon: PropTypes.object,\n  underlayColor: PropTypes.string,\n  subtitle: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]),\n  subtitleStyle: PropTypes.any,\n  containerStyle: PropTypes.any,\n  wrapperStyle: PropTypes.any,\n  titleStyle: PropTypes.any,\n  titleContainerStyle: PropTypes.any,\n  hideChevron: PropTypes.bool,\n  chevronColor: PropTypes.string,\n  roundAvatar: PropTypes.bool,\n  badge: PropTypes.any,\n  switchButton: PropTypes.bool,\n  onSwitch: PropTypes.func,\n  switchDisabled: PropTypes.bool,\n  switchOnTintColor: PropTypes.string,\n  switchThumbTintColor: PropTypes.string,\n  switchTintColor: PropTypes.string,\n  switched: PropTypes.bool,\n  textInput: PropTypes.bool,\n  textInputAutoCapitalize: PropTypes.bool,\n  textInputAutoCorrect: PropTypes.bool,\n  textInputAutoFocus: PropTypes.bool,\n  textInputEditable: PropTypes.bool,\n  textInputKeyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable',\n    'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),\n  textInputMaxLength: PropTypes.number,\n  textInputMultiline: PropTypes.bool,\n  textInputOnChangeText: PropTypes.func,\n  textInputOnFocus: PropTypes.func,\n  textInputOnBlur: PropTypes.func,\n  textInputSelectTextOnFocus: PropTypes.bool,\n  textInputReturnKeyType: PropTypes.string,\n  textInputValue: PropTypes.string,\n  textInputStyle: PropTypes.any,\n  textInputContainerStyle: PropTypes.any,\n  component: PropTypes.any,\n  fontFamily: PropTypes.string,\n  rightTitle: PropTypes.string,\n  rightTitleContainerStyle: View.propTypes.style,\n  rightTitleStyle: Text.propTypes.style,\n  subtitleContainerStyle: View.propTypes.style,\n  label: PropTypes.any,\n  onLongPress: PropTypes.func,\n  leftIcon: PropTypes.object,\n  leftIconContainerStyle: View.propTypes.style,\n  avatarStyle: View.propTypes.style,\n};\n\nconst styles = StyleSheet.create({\n  avatar: {\n    width: 34,\n    height: 34\n  },\n  container: {\n    paddingTop: 10,\n    paddingRight: 10,\n    paddingBottom: 10,\n    borderBottomColor: '#ededed',\n    borderBottomWidth: 1,\n    backgroundColor: 'transparent'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    marginLeft: 10,\n  },\n  iconStyle: {\n    flex: 0.15,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  icon: {\n    marginRight: 8\n  },\n  title: {\n    fontSize: normalize(14),\n    color: colors.grey1\n  },\n  subtitle: {\n    color: colors.grey3,\n    fontSize: normalize(12),\n    marginTop: 1,\n    ...Platform.select({\n      ios: {\n        fontWeight: '600'\n      },\n      android: {\n        ...fonts.android.bold\n      }\n    })\n  },\n  titleSubtitleContainer: {\n    justifyContent: 'center',\n    flex: 1,\n  },\n  chevronContainer: {\n    flex: 0.15,\n    alignItems: 'flex-end',\n    justifyContent: 'center'\n  },\n  switchContainer: {\n    flex: 0.15,\n    alignItems: 'flex-end',\n    justifyContent: 'center',\n    marginRight: 5\n  },\n  rightTitleContainer: {\n    flex: 1,\n    alignItems: 'flex-end',\n    justifyContent: 'center'\n  },\n  rightTitleStyle: {\n    marginRight: 5,\n    color: colors.grey4\n  },\n  textInputStyle: {\n    height: 20,\n    textAlign: 'right'\n  }\n});\n\nexport default ListItem;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/list/List.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport colors from '../config/colors';\n\nconst List = props => {\n  const {children, containerStyle, ...attributes} = props;\n  return (\n    <View style={[styles.listContainer, containerStyle && containerStyle]} {...attributes}>\n      {children}\n    </View>\n  );\n};\n\nList.propTypes = {\n  children: PropTypes.any,\n  containerStyle: View.propTypes.style,\n};\n\nconst styles = StyleSheet.create({\n  listContainer: {\n    marginTop: 20,\n    borderTopWidth: 1,\n    borderBottomWidth: 1,\n    borderColor: colors.greyOutline,\n    backgroundColor: colors.white,\n  }\n});\n\nexport default List;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/pricing/PricingCard.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport Text from '../text/Text';\nimport fonts from '../config/fonts';\nimport colors from '../config/colors';\nimport Button from '../buttons/Button';\nimport normalize from '../helpers/normalizeText';\n\nconst PricingCard = props => {\n  const {\n    containerStyle,\n    wrapperStyle,\n    title,\n    price,\n    info,\n    button,\n    color,\n    titleFont,\n    pricingFont,\n    infoFont,\n    buttonFont,\n    onButtonPress,\n    ...attributes,\n  } = props;\n  return (\n    <View style={[styles.container, containerStyle && containerStyle]} {...attributes}>\n      <View style={[styles.wrapper, wrapperStyle && wrapperStyle]}>\n        <Text style={[\n          styles.pricingTitle,\n          {color},\n          titleFont && {fontFamily: titleFont}\n        ]}>{title}</Text>\n        <Text style={[\n          styles.pricingPrice,\n          pricingFont && {fontFamily: pricingFont}\n        ]}>{price}</Text>\n        {\n          info.map((item, i) => {\n            return <Text key={i} style={[\n              styles.pricingInfo,\n              infoFont && {fontFamily: infoFont}\n            ]}>{item}</Text>;\n          })\n        }\n        <Button\n          icon={{name: button.icon}}\n          buttonStyle={[\n            styles.button,\n            button.buttonStyle,\n            {backgroundColor: color},\n          ]}\n          fontFamily={buttonFont && buttonFont}\n          title={button.title}\n          onPress={onButtonPress}\n           />\n      </View>\n    </View>\n  );\n};\n\nPricingCard.propTypes = {\n  containerStyle: View.propTypes.style,\n  wrapperStyle: View.propTypes.style,\n  title: PropTypes.string,\n  price: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  info: PropTypes.array,\n  button: PropTypes.object,\n  color: PropTypes.string,\n  onButtonPress: PropTypes.any,\n  titleFont: PropTypes.string,\n  pricingFont: PropTypes.string,\n  infoFont: PropTypes.string,\n  buttonFont: PropTypes.string,\n};\n\nPricingCard.defaultProps = {\n  color: colors.primary\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 15,\n    marginBottom: 15,\n    backgroundColor: 'white',\n    borderColor: colors.grey5,\n    borderWidth: 1,\n    padding: 15,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .2)',\n        shadowOffset: {height: 1, width: 0},\n        shadowOpacity: 0.5,\n        shadowRadius: 0.5\n      },\n      android: {\n        elevation: 1\n      }\n    })\n  },\n  wrapper: {\n    backgroundColor: 'transparent'\n  },\n  pricingTitle: {\n    textAlign: 'center',\n    color: colors.primary,\n    fontSize: normalize(30),\n    ...Platform.select({\n      ios: {\n        fontWeight: '800'\n      },\n      android: {\n        ...fonts.android.black\n      }\n    })\n  },\n  pricingPrice: {\n    textAlign: 'center',\n    marginTop: 10,\n    marginBottom: 10,\n    fontSize: normalize(40),\n    ...Platform.select({\n      ios: {\n        fontWeight: '700'\n      },\n      android: {\n        ...fonts.android.bold\n      }\n    })\n  },\n  pricingInfo: {\n    textAlign: 'center',\n    marginTop: 5,\n    marginBottom: 5,\n    color: colors.grey3,\n    ...Platform.select({\n      ios: {\n        fontWeight: '600'\n      },\n      android: {\n        ...fonts.android.bold\n      }\n    })\n  },\n  button: {\n    marginTop: 15,\n    marginBottom: 10\n  }\n});\n\nexport default PricingCard;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/sidemenu/SideMenu.js":"import SideMenu from 'react-native-side-menu';\nexport default SideMenu;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/slider/Slider.js":"import React, { PropTypes, Component } from 'react';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\n\n// import shallowCompare from 'react-addons-shallow-compare';\n// import styleEqual from 'style-equal'\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring : {\n    friction : 7,\n    tension  : 100\n  },\n  timing : {\n    duration : 150,\n    easing   : Easing.inOut(Easing.ease),\n    delay    : 0\n  },\n};\n\nfunction Rect(x, y, width, height) {\n  this.x = x;\n  this.y = y;\n  this.width = width;\n  this.height = height;\n}\n\nRect.prototype.containsPoint = function(x, y) {\n  return (x >= this.x\n    && y >= this.y\n    && x <= this.x + this.width\n    && y <= this.y + this.height);\n};\n\nexport default class Slider extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      containerSize: {width: 0, height: 0},\n      trackSize: {width: 0, height: 0},\n      thumbSize: {width: 0, height: 0},\n      allMeasured: false,\n      value: new Animated.Value(props.value),\n    };\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      }\n      else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   // We don't want to re-render in the following cases:\n  //   // - when only the 'value' prop changes as it's already handled with the Animated.Value\n  //   // - when the event handlers change (rendering doesn't depend on them)\n  //   // - when the style props haven't actually change\n  //\n  //   return shallowCompare(\n  //     { props: this._getPropsForComponentUpdate(this.props), state: this.state },\n  //     this._getPropsForComponentUpdate(nextProps),\n  //     nextState\n  //   ) || !styleEqual(this.props.style, nextProps.style)\n  //     || !styleEqual(this.props.trackStyle, nextProps.trackStyle)\n  //     || !styleEqual(this.props.thumbStyle, nextProps.thumbStyle);\n  // }\n  //\n  // _getPropsForComponentUpdate(props) {\n  //   var {\n  //     value,\n  //     onValueChange,\n  //     onSlidingStart,\n  //     onSlidingComplete,\n  //     style,\n  //     trackStyle,\n  //     thumbStyle,\n  //     ...otherProps,\n  //   } = props;\n  //\n  //   return otherProps;\n  // }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign( {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue : value\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/){\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(e, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(e) {\n    var nativeEvent = e.nativeEvent;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n  }\n\n  handleStartShouldSetPanResponder(e, /*gestureState: Object*/) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var state = this.state;\n    var props = this.props;\n\n    var size = {};\n    if (state.allMeasured === true) {\n      size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n      size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var { width, height } = this.getTouchOverflowSize();\n\n    var touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    var { width, height } = x.nativeEvent.layout;\n    var size = {width: width, height: height};\n\n    var storeName = `_${name}`;\n    var currentSize = this[storeName];\n    if (currentSize && width === currentSize.width && height === currentSize.height) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer(x) {\n    this.handleMeasure('containerSize', x);\n  }\n\n  measureTrack(x) {\n    this.handleMeasure('trackSize', x);\n  }\n\n  measureThumb(x) {\n    this.handleMeasure('thumbSize', x);\n  }\n\n  getValue(gestureState) {\n    var length = this.state.containerSize.width - this.state.thumbSize.width;\n    var thumbLeft = this._previousLeft + gestureState.dx;\n\n    var ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(this.props.minimumValue,\n        Math.min(this.props.maximumValue,\n          this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step\n        )\n      );\n    } else {\n      return Math.max(this.props.minimumValue,\n        Math.min(this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n  }\n\n  getThumbLeft(value) {\n    var ratio = this.getRatio(value);\n    return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n  }\n\n  getThumbTouchRect() {\n    var state = this.state;\n    var props = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2,\n      props.thumbTouchSize.width,\n      props.thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return (\n      <Animated.View\n        style={positionStyle}\n        pointerEvents='none'\n      />\n    );\n  }\n\n  render () {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      ...other\n    } = this.props;\n\n    var { value, containerSize, trackSize, thumbSize, allMeasured} = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbLeft = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width],\n        //extrapolate: 'clamp',\n      });\n\n    var valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.opacity = 0;\n    }\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width: Animated.add(thumbLeft, thumbSize.width / 2),\n      marginTop: -trackSize.height,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle\n    };\n\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View {...other} style={[mainStyles.container, style]} onLayout={this.measureContainer.bind(this)}>\n        <View\n          style={[{backgroundColor: maximumTrackTintColor,}, mainStyles.track, trackStyle]}\n          onLayout={this.measureTrack.bind(this)} />\n        <Animated.View style={[mainStyles.track, trackStyle, minimumTrackStyle]} />\n        <Animated.View\n          onLayout={this.measureThumb.bind(this)}\n          style={[\n            {backgroundColor: thumbTintColor},\n            mainStyles.thumb, thumbStyle,\n            {\n              transform: [\n                { translateX: thumbLeft },\n                { translateY: -(trackSize.height + thumbSize.height) / 2 }\n              ],\n              ...valueVisibleStyle\n            }\n          ]}\n        />\n        <View\n          style={[styles.touchArea, touchOverflowStyle]}\n          {...this.panResponder.panHandlers}>\n          {debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape(\n    {width: PropTypes.number, height: PropTypes.number}\n  ),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: View.propTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: View.propTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: View.propTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n  * Set to true to animate values with default 'timing' animation type\n  */\n  animateTransitions : PropTypes.bool,\n\n  /**\n  * Custom Animation type. 'spring' or 'timing'.\n  */\n  animationType : PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n  * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n  */\n  animationConfig : PropTypes.object,\n  containerStyle: View.propTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing'\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/social/SocialIcon.js":"import React, { PropTypes } from 'react';\nimport { View, StyleSheet, Platform, TouchableHighlight, ActivityIndicator } from 'react-native';\nimport Icon from 'react-native-vector-icons/FontAwesome';\nimport Text from '../text/Text';\nimport fonts from '../config/fonts';\n\nconst log = () => {\n  console.log('please attach method to this component'); // eslint-disable-line no-console\n};\n\nconst colors = {\n  facebook: '#3b5998',\n  twitter: '#00aced',\n  ['google-plus-official']: '#dd4b39',\n  pinterest: '#cb2027',\n  linkedin: '#007bb6',\n  youtube: '#bb0000',\n  vimeo: '#aad450',\n  tumblr: '#32506d',\n  instagram: '#517fa4',\n  quora: '#a82400',\n  foursquare: '#0072b1',\n  wordpress: '#21759b',\n  stumbleupon: '#EB4823',\n  github: '#000000',\n  ['github-alt']: '#000000',\n  twitch: '#6441A5',\n  medium: '#02b875',\n  soundcloud: '#f50',\n  gitlab: '#e14329',\n  angellist: '#1c4082',\n  codepen: '#000000'\n};\n\nconst SocialIcon = props => {\n  const {\n    component,\n    type,\n    button,\n    disabled,\n    loading,\n    activityIndicatorStyle,\n    small,\n    onPress,\n    iconStyle,\n    style,\n    iconColor,\n    title,\n    raised,\n    light,\n    fontFamily,\n    fontStyle,\n    iconSize,\n    onLongPress,\n    fontWeight,\n    ...attributes,\n  } = props;\n\n  const Component = (onPress || onLongPress) ? component || TouchableHighlight : View;\n  let loadingElement;\n  if(loading){\n    loadingElement = (\n      <ActivityIndicator\n        animating={true}\n        style={[styles.activityIndicatorStyle, activityIndicatorStyle]}\n        color={iconColor || 'white'}\n        size={small && 'small' || 'large'}\n      />\n    );\n  }\n  return (\n    <Component\n      underlayColor={light ? 'white' : colors[type]}\n      onLongPress={!disabled && (onLongPress || log)}\n      onPress={(!disabled || log) && (onPress || log)}\n      disabled={disabled || false}\n      style={[\n        raised && styles.raised,\n        styles.container,\n        button && styles.button,\n        !button && raised && styles.icon,\n        !button && !light && !raised && {\n          width: iconSize * 2 + 4,\n          height: iconSize * 2 + 4,\n          borderRadius: iconSize * 2\n        },\n        {backgroundColor: colors[type]},\n        light && {backgroundColor: 'white'},\n        style && style\n      ]}\n      {...attributes}\n    >\n      <View style={styles.wrapper}>\n        <Icon\n          style={[iconStyle && iconStyle]}\n          color={light ? colors[type] : iconColor}\n          name={type}\n          size={iconSize} />\n        {\n          button && title && (\n            <Text\n              style={[\n                styles.title,\n                light && {color: colors[type]},\n                fontFamily && {fontFamily},\n                fontWeight && {fontWeight},\n                fontStyle && fontStyle\n              ]}>{title}</Text>\n          )\n        }\n        {\n            loading && loadingElement\n        }\n      </View>\n    </Component>\n  );\n};\n\nSocialIcon.propTypes = {\n  component: PropTypes.element,\n  type: PropTypes.string,\n  button: PropTypes.bool,\n  onPress: PropTypes.func,\n  onLongPress: PropTypes.func,\n  iconStyle: View.propTypes.style,\n  style: View.propTypes.style,\n  iconColor: PropTypes.string,\n  title: PropTypes.string,\n  raised: PropTypes.bool,\n  disabled: PropTypes.bool,\n  loading: PropTypes.bool,\n  activityIndicatorStyle: View.propTypes.style,\n  small: PropTypes.string,\n  iconSize: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]),\n  light: PropTypes.bool,\n  fontWeight: PropTypes.string,\n  fontStyle: View.propTypes.style,\n  fontFamily: PropTypes.string,\n};\n\nSocialIcon.defaultProps = {\n  raised: true,\n  iconColor: 'white',\n  iconSize: 24,\n  button: false\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    margin: 7,\n    borderRadius: 30,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  button: {\n    paddingTop: 14,\n    paddingBottom: 14\n  },\n  raised: {\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: {height: 1, width: 1},\n        shadowOpacity: 1,\n        shadowRadius: 1\n      },\n      android: {\n        elevation: 2\n      }\n    })\n  },\n  wrapper: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  title: {\n    color: 'white',\n    marginLeft: 15,\n    ...Platform.select({\n      ios: {\n        fontWeight: 'bold'\n      },\n      android: {\n        ...fonts.android.black\n      }\n    })\n  },\n  icon: {\n    height: 52,\n    width: 52\n  },\n  activityIndicatorStyle: {\n    marginHorizontal: 10,\n    height: 0\n  },\n});\n\nexport default SocialIcon;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/tabs/Tab.js":"import TabNavigator from 'react-native-tab-navigator';\nexport default TabNavigator.Item;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/tabs/Tabs.js":"import TabNavigator from 'react-native-tab-navigator';\nexport default TabNavigator;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/text/Text.js":"import React, { PropTypes } from 'react';\nimport { Text, StyleSheet, Platform } from 'react-native';\nimport fonts from '../config/fonts';\nimport normalize from '../helpers/normalizeText';\n\nconst styles = StyleSheet.create({\n  text: {\n    ...Platform.select({\n      android: {\n        ...fonts.android.regular\n      }\n    })\n  },\n  bold: {\n    ...Platform.select({\n      android: {\n        ...fonts.android.bold\n      }\n    })\n  }\n});\n\nconst TextElement = (props) => {\n  const {\n    style,\n    children,\n    h1,\n    h2,\n    h3,\n    h4,\n    fontFamily,\n    ...rest,\n  } = props;\n\n  return (\n    <Text\n      style={[\n        styles.text,\n        h1 && {fontSize: normalize(40)},\n        h2 && {fontSize: normalize(34)},\n        h3 && {fontSize: normalize(28)},\n        h4 && {fontSize: normalize(22)},\n        h1 && styles.bold,\n        h2 && styles.bold,\n        h3 && styles.bold,\n        h4 && styles.bold,\n        fontFamily && {fontFamily},\n        style && style\n      ]}\n      {...rest}\n    >{children}</Text>\n  );\n};\n\nTextElement.propTypes = {\n style: PropTypes.any,\n h1: PropTypes.bool,\n h2: PropTypes.bool,\n h3: PropTypes.bool,\n h4: PropTypes.bool,\n fontFamily: PropTypes.string,\n children: PropTypes.any,\n};\n\nexport default TextElement;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/tile/FeaturedTile.js":"import React, { PropTypes } from 'react';\nimport {\n  TouchableOpacity,\n  Text as NativeText,\n  View,\n  Image,\n  StyleSheet,\n  Dimensions,\n} from 'react-native';\nimport Text from '../text/Text';\nimport Icon from '../icons/Icon';\n\nconst FeaturedTile = props => {\n  const {\n    title,\n    icon,\n    caption,\n    imageSrc,\n    containerStyle,\n    imageContainerStyle,\n    overlayContainerStyle,\n    iconContainerStyle,\n    titleStyle,\n    captionStyle,\n    ...attributes,\n  } = props;\n\n  let {\n    width,\n    height,\n  } = props;\n\n  if (!width) {\n    width = Dimensions.get('window').width;\n  }\n  if (!height) {\n    height = width * 0.8;\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      width,\n      height,\n    },\n    imageContainer: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      resizeMode: 'cover',\n      backgroundColor: '#ffffff',\n      width,\n      height,\n    },\n    overlayContainer: {\n      flex: 1,\n      alignItems: 'center',\n      backgroundColor: 'rgba(0,0,0,0.2)',\n      alignSelf: 'stretch',\n      justifyContent: 'center',\n      paddingLeft: 25,\n      paddingRight: 25,\n      paddingTop: 45,\n      paddingBottom: 40,\n      position: 'absolute',\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n    },\n    text: {\n      color: '#ffffff',\n      backgroundColor: 'rgba(0,0,0,0)',\n      marginBottom: 15,\n      textAlign: 'center',\n    },\n    iconContainer: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignSelf: 'center'\n    }\n  });\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.container,\n        containerStyle && containerStyle,\n      ]}\n      {...attributes}\n    >\n      <Image\n        source={imageSrc}\n        style={[\n          styles.imageContainer,\n          imageContainerStyle && imageContainerStyle,\n        ]}\n      >\n        <View\n          style={[\n            styles.overlayContainer,\n            overlayContainerStyle && overlayContainerStyle,\n          ]}\n        >\n          <View\n            style={[\n              styles.iconContainer,\n              iconContainerStyle && iconContainerStyle,\n            ]}\n          >\n            {icon && <Icon {...icon} />}\n          </View>\n          <Text\n            h4\n            style={[\n              styles.text,\n              titleStyle && titleStyle,\n            ]}\n          >\n            {title}\n          </Text>\n          <Text\n            style={[\n              styles.text,\n              captionStyle && captionStyle,\n            ]}\n          >\n            {caption}\n          </Text>\n        </View>\n      </Image>\n    </TouchableOpacity>\n  );\n};\n\nFeaturedTile.propTypes = {\n  title: PropTypes.string,\n  icon: PropTypes.object,\n  caption: PropTypes.string,\n  imageSrc: Image.propTypes.source.isRequired,\n  onPress: PropTypes.func,\n  containerStyle: View.propTypes.style,\n  iconContainerStyle: View.propTypes.style,\n  imageContainerStyle: View.propTypes.style,\n  overlayContainerStyle: View.propTypes.style,\n  titleStyle: NativeText.propTypes.style,\n  captionStyle: NativeText.propTypes.style,\n  width: PropTypes.number,\n  height: PropTypes.number,\n};\n\nexport default FeaturedTile;\n","/home/travis/build/npmtest/node-npmtest-react-native-elements/node_modules/react-native-elements/src/tile/Tile.js":"import React, { PropTypes } from 'react';\nimport {\n  View,\n  Image,\n  Text as NativeText,\n  StyleSheet,\n  Dimensions,\n  TouchableOpacity,\n} from 'react-native';\nimport Text from '../text/Text';\nimport Icon from '../icons/Icon';\nimport FeaturedTile from './FeaturedTile';\n\nconst Tile = props => {\n  const {\n    featured,\n    imageSrc,\n    icon,\n    title,\n    children,\n    caption,\n    titleStyle,\n    onPress,\n    activeOpacity,\n    overlayContainerStyle,\n    captionStyle,\n    iconContainerStyle,\n    imageContainerStyle,\n    containerStyle,\n    contentContainerStyle,\n    ...attributes,\n  } = props;\n\n  let {\n    width,\n    height,\n  } = props;\n\n  if (!width) {\n    width = Dimensions.get('window').width;\n  }\n\n  if (!height) {\n    height = width * 0.8;\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      width,\n      height,\n    },\n    imageContainer: {\n      alignItems: 'center',\n      justifyContent: 'center',\n      resizeMode: 'cover',\n      backgroundColor: '#ffffff',\n      flex: 2,\n    },\n    text: {\n      backgroundColor: 'rgba(0,0,0,0)',\n      marginBottom: 5,\n    },\n    contentContainer: {\n      paddingTop: 15,\n      paddingBottom: 5,\n      paddingLeft: 15,\n      paddingRight: 15,\n    },\n    iconContainer: {\n      justifyContent: 'center',\n      alignItems: 'center',\n      alignSelf: 'center'\n    }\n  });\n\n  if (featured) {\n    const featuredProps = {\n      title,\n      icon,\n      caption,\n      imageSrc,\n      onPress,\n      activeOpacity,\n      containerStyle,\n      imageContainerStyle,\n      overlayContainerStyle,\n      titleStyle,\n      captionStyle,\n      width,\n      height,\n    };\n    return (\n      <FeaturedTile {...featuredProps} />\n    );\n  }\n\n  return (\n    <TouchableOpacity\n      style={[\n        styles.container,\n        containerStyle && containerStyle,\n      ]}\n      {...attributes}\n    >\n      <Image\n        source={imageSrc}\n        style={[\n          styles.imageContainer,\n          imageContainerStyle && imageContainerStyle,\n        ]}\n      >\n        <View\n          style={[\n            styles.iconContainer,\n            iconContainerStyle && iconContainerStyle,\n          ]}\n        >\n          {icon && <Icon {...icon} />}\n        </View>\n      </Image>\n      <View\n        style={[\n          styles.contentContainer,\n          contentContainerStyle && contentContainerStyle,\n        ]}\n      >\n        <Text\n          h4\n          style={[\n            styles.text,\n            titleStyle && titleStyle,\n          ]}\n        >\n          {title}\n        </Text>\n        {children}\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nTile.propTypes = {\n  title: PropTypes.string,\n  icon: PropTypes.object,\n  caption: PropTypes.string,\n  imageSrc: Image.propTypes.source.isRequired,\n  onPress: PropTypes.func,\n  activeOpacity: PropTypes.number,\n  containerStyle: View.propTypes.style,\n  imageContainerStyle: View.propTypes.style,\n  iconContainerStyle: View.propTypes.style,\n  overlayContainerStyle: View.propTypes.style,\n  titleStyle: NativeText.propTypes.style,\n  captionStyle: NativeText.propTypes.style,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  featured: PropTypes.bool,\n  children: PropTypes.any,\n  contentContainerStyle: View.propTypes.style,\n};\n\nexport default Tile;\n"}